AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: VPC for account

Parameters:
  VPCName:
    Type: String
    Description: Name of the VPC
  
  VPCRegion:
    Type: String
    Description: Name of the VPC Region

  Subnet2Required:
    Type: String
    Description: 2nd Subnet required
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  Subnet3Required:
    Type: String
    Description: 3rd Subnet required
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  Subnet4Required:
    Type: String
    Description: 4th Subnet required
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  Subnet5Required:
    Type: String
    Description: 5th Subnet required
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  Subnet6Required:
    Type: String
    Description: 6th Subnet required
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  NatGatewayRequired:
    Type: String
    Description: Nat Gateway Required
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

Conditions:
  2ndSubnetRequired: !Equals ["true", !Ref Subnet2Required]
  3rdSubnetRequired: !Equals ["true", !Ref Subnet3Required]
  4thSubnetRequired: !Equals ["true", !Ref Subnet4Required]
  5thSubnetRequired: !Equals ["true", !Ref Subnet5Required]
  6thSubnetRequired: !Equals ["true", !Ref Subnet6Required]
  NatGWNeeded: !Equals ["true", !Ref NatGatewayRequired]

Resources:
  ## VPC
  PubPrivateVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: true
      EnableDnsSupport: true
      CidrBlock: 10.1.0.0/16
      Tags:
        - Key : Name
          Value: !Sub ${VPCName}-VPC

  ## SUBNETS
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}a
      CidrBlock: 10.1.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Public-Subnet-A

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: 2ndSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}b
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Public-Subnet-B

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: 3rdSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}c
      CidrBlock: 10.1.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Public-Subnet-C

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Condition: 4thSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}d
      CidrBlock: 10.1.4.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Public-Subnet-D

  PublicSubnet5:
    Type: AWS::EC2::Subnet
    Condition: 5thSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}e
      CidrBlock: 10.1.5.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Public-Subnet-E

  PublicSubnet6:
    Type: AWS::EC2::Subnet
    Condition: 6thSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}f
      CidrBlock: 10.1.6.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Public-Subnet-F

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}a
      CidrBlock: 10.1.7.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Private-Subnet-A

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: 2ndSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}b
      CidrBlock: 10.1.8.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Private-Subnet-B

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: 3rdSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}c
      CidrBlock: 10.1.9.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Private-Subnet-C

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Condition: 4thSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}d
      CidrBlock: 10.1.10.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Private-Subnet-D

  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Condition: 5thSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}e
      CidrBlock: 10.1.11.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Private-Subnet-E

  PrivateSubnet6:
    Type: AWS::EC2::Subnet
    Condition: 6thSubnetRequired
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub ${VPCRegion}f
      CidrBlock: 10.1.12.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-Private-Subnet-F

 ## INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PubPrivateVPC
      InternetGatewayId: !Ref InternetGateway

  ## PUBLIC ROUTING
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PubPrivateVPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-VPC-Public-Route

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 2ndSubnetRequired
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 3rdSubnetRequired
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 4thSubnetRequired
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 5thSubnetRequired
    Properties:
      SubnetId: !Ref PublicSubnet5
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 6thSubnetRequired
    Properties:
      SubnetId: !Ref PublicSubnet6
      RouteTableId: !Ref PublicRouteTable

  ## NAT GATEWAY
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Condition: NatGWNeeded
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP.AllocationId

  ## ELASTIC IP
  NatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: PubPrivateVPC
    Condition: NatGWNeeded
    Properties:
      Domain: vpc

  ## PRIVATE ROUTING
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PubPrivateVPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-VPC-Private-Route

  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: NatGWNeeded
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 2ndSubnetRequired
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 3rdSubnetRequired
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 4thSubnetRequired
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 5thSubnetRequired
    Properties:
      SubnetId: !Ref PrivateSubnet5
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 6thSubnetRequired
    Properties:
      SubnetId: !Ref PrivateSubnet6
      RouteTableId: !Ref PrivateRouteTable

  VPCEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC endpoint
      GroupName: !Sub ${VPCName}-VPC-Endpoint-SG
      VpcId: !Ref PubPrivateVPC

  VPCEndpointConsumerSG:
    DependsOn: VPCEndpointSG
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow users to connect to the VPC Endpoint
      GroupName: !Sub ${VPCName}-VPC-Endpoint-Consumer-SG
      VpcId: !Ref PubPrivateVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          DestinationSecurityGroupId: !Ref VPCEndpointSG

  VPCEndpointIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: VPCEndpointConsumerSG
    Properties:
      Description: Allowing consumer Security Group to connect to VPC Endpoint
      FromPort: -1
      GroupId: !GetAtt VPCEndpointSG.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt VPCEndpointConsumerSG.GroupId
      ToPort: -1

